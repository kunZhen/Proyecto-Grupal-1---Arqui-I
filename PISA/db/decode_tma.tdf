--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2022:10:25:15:36:38:SC cbx_lpm_add_sub 2022:10:25:15:36:38:SC cbx_lpm_compare 2022:10:25:15:36:38:SC cbx_lpm_decode 2022:10:25:15:36:36:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_nadder 2022:10:25:15:36:38:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode8343w[1..0]	: WIRE;
	w_anode8352w[3..0]	: WIRE;
	w_anode8369w[3..0]	: WIRE;
	w_anode8379w[3..0]	: WIRE;
	w_anode8389w[3..0]	: WIRE;
	w_anode8399w[3..0]	: WIRE;
	w_anode8409w[3..0]	: WIRE;
	w_anode8419w[3..0]	: WIRE;
	w_anode8429w[3..0]	: WIRE;
	w_anode8441w[1..0]	: WIRE;
	w_anode8448w[3..0]	: WIRE;
	w_anode8459w[3..0]	: WIRE;
	w_anode8469w[3..0]	: WIRE;
	w_anode8479w[3..0]	: WIRE;
	w_anode8489w[3..0]	: WIRE;
	w_anode8499w[3..0]	: WIRE;
	w_anode8509w[3..0]	: WIRE;
	w_anode8519w[3..0]	: WIRE;
	w_data8341w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode8519w[3..3], w_anode8509w[3..3], w_anode8499w[3..3], w_anode8489w[3..3], w_anode8479w[3..3], w_anode8469w[3..3], w_anode8459w[3..3], w_anode8448w[3..3]), ( w_anode8429w[3..3], w_anode8419w[3..3], w_anode8409w[3..3], w_anode8399w[3..3], w_anode8389w[3..3], w_anode8379w[3..3], w_anode8369w[3..3], w_anode8352w[3..3]));
	w_anode8343w[] = ( (w_anode8343w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode8352w[] = ( (w_anode8352w[2..2] & (! w_data8341w[2..2])), (w_anode8352w[1..1] & (! w_data8341w[1..1])), (w_anode8352w[0..0] & (! w_data8341w[0..0])), w_anode8343w[1..1]);
	w_anode8369w[] = ( (w_anode8369w[2..2] & (! w_data8341w[2..2])), (w_anode8369w[1..1] & (! w_data8341w[1..1])), (w_anode8369w[0..0] & w_data8341w[0..0]), w_anode8343w[1..1]);
	w_anode8379w[] = ( (w_anode8379w[2..2] & (! w_data8341w[2..2])), (w_anode8379w[1..1] & w_data8341w[1..1]), (w_anode8379w[0..0] & (! w_data8341w[0..0])), w_anode8343w[1..1]);
	w_anode8389w[] = ( (w_anode8389w[2..2] & (! w_data8341w[2..2])), (w_anode8389w[1..1] & w_data8341w[1..1]), (w_anode8389w[0..0] & w_data8341w[0..0]), w_anode8343w[1..1]);
	w_anode8399w[] = ( (w_anode8399w[2..2] & w_data8341w[2..2]), (w_anode8399w[1..1] & (! w_data8341w[1..1])), (w_anode8399w[0..0] & (! w_data8341w[0..0])), w_anode8343w[1..1]);
	w_anode8409w[] = ( (w_anode8409w[2..2] & w_data8341w[2..2]), (w_anode8409w[1..1] & (! w_data8341w[1..1])), (w_anode8409w[0..0] & w_data8341w[0..0]), w_anode8343w[1..1]);
	w_anode8419w[] = ( (w_anode8419w[2..2] & w_data8341w[2..2]), (w_anode8419w[1..1] & w_data8341w[1..1]), (w_anode8419w[0..0] & (! w_data8341w[0..0])), w_anode8343w[1..1]);
	w_anode8429w[] = ( (w_anode8429w[2..2] & w_data8341w[2..2]), (w_anode8429w[1..1] & w_data8341w[1..1]), (w_anode8429w[0..0] & w_data8341w[0..0]), w_anode8343w[1..1]);
	w_anode8441w[] = ( (w_anode8441w[0..0] & data_wire[3..3]), enable_wire);
	w_anode8448w[] = ( (w_anode8448w[2..2] & (! w_data8341w[2..2])), (w_anode8448w[1..1] & (! w_data8341w[1..1])), (w_anode8448w[0..0] & (! w_data8341w[0..0])), w_anode8441w[1..1]);
	w_anode8459w[] = ( (w_anode8459w[2..2] & (! w_data8341w[2..2])), (w_anode8459w[1..1] & (! w_data8341w[1..1])), (w_anode8459w[0..0] & w_data8341w[0..0]), w_anode8441w[1..1]);
	w_anode8469w[] = ( (w_anode8469w[2..2] & (! w_data8341w[2..2])), (w_anode8469w[1..1] & w_data8341w[1..1]), (w_anode8469w[0..0] & (! w_data8341w[0..0])), w_anode8441w[1..1]);
	w_anode8479w[] = ( (w_anode8479w[2..2] & (! w_data8341w[2..2])), (w_anode8479w[1..1] & w_data8341w[1..1]), (w_anode8479w[0..0] & w_data8341w[0..0]), w_anode8441w[1..1]);
	w_anode8489w[] = ( (w_anode8489w[2..2] & w_data8341w[2..2]), (w_anode8489w[1..1] & (! w_data8341w[1..1])), (w_anode8489w[0..0] & (! w_data8341w[0..0])), w_anode8441w[1..1]);
	w_anode8499w[] = ( (w_anode8499w[2..2] & w_data8341w[2..2]), (w_anode8499w[1..1] & (! w_data8341w[1..1])), (w_anode8499w[0..0] & w_data8341w[0..0]), w_anode8441w[1..1]);
	w_anode8509w[] = ( (w_anode8509w[2..2] & w_data8341w[2..2]), (w_anode8509w[1..1] & w_data8341w[1..1]), (w_anode8509w[0..0] & (! w_data8341w[0..0])), w_anode8441w[1..1]);
	w_anode8519w[] = ( (w_anode8519w[2..2] & w_data8341w[2..2]), (w_anode8519w[1..1] & w_data8341w[1..1]), (w_anode8519w[0..0] & w_data8341w[0..0]), w_anode8441w[1..1]);
	w_data8341w[2..0] = data_wire[2..0];
END;
--VALID FILE
