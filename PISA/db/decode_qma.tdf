--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=13 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2022:10:25:15:36:38:SC cbx_lpm_add_sub 2022:10:25:15:36:38:SC cbx_lpm_compare 2022:10:25:15:36:38:SC cbx_lpm_decode 2022:10:25:15:36:36:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_nadder 2022:10:25:15:36:38:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_qma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[12..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[12..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3397w[1..0]	: WIRE;
	w_anode3406w[3..0]	: WIRE;
	w_anode3423w[3..0]	: WIRE;
	w_anode3433w[3..0]	: WIRE;
	w_anode3443w[3..0]	: WIRE;
	w_anode3453w[3..0]	: WIRE;
	w_anode3463w[3..0]	: WIRE;
	w_anode3473w[3..0]	: WIRE;
	w_anode3483w[3..0]	: WIRE;
	w_anode3495w[1..0]	: WIRE;
	w_anode3502w[3..0]	: WIRE;
	w_anode3513w[3..0]	: WIRE;
	w_anode3523w[3..0]	: WIRE;
	w_anode3533w[3..0]	: WIRE;
	w_anode3543w[3..0]	: WIRE;
	w_anode3553w[3..0]	: WIRE;
	w_anode3563w[3..0]	: WIRE;
	w_anode3573w[3..0]	: WIRE;
	w_data3395w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[12..0] = eq_wire[12..0];
	eq_wire[] = ( ( w_anode3573w[3..3], w_anode3563w[3..3], w_anode3553w[3..3], w_anode3543w[3..3], w_anode3533w[3..3], w_anode3523w[3..3], w_anode3513w[3..3], w_anode3502w[3..3]), ( w_anode3483w[3..3], w_anode3473w[3..3], w_anode3463w[3..3], w_anode3453w[3..3], w_anode3443w[3..3], w_anode3433w[3..3], w_anode3423w[3..3], w_anode3406w[3..3]));
	w_anode3397w[] = ( (w_anode3397w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3406w[] = ( (w_anode3406w[2..2] & (! w_data3395w[2..2])), (w_anode3406w[1..1] & (! w_data3395w[1..1])), (w_anode3406w[0..0] & (! w_data3395w[0..0])), w_anode3397w[1..1]);
	w_anode3423w[] = ( (w_anode3423w[2..2] & (! w_data3395w[2..2])), (w_anode3423w[1..1] & (! w_data3395w[1..1])), (w_anode3423w[0..0] & w_data3395w[0..0]), w_anode3397w[1..1]);
	w_anode3433w[] = ( (w_anode3433w[2..2] & (! w_data3395w[2..2])), (w_anode3433w[1..1] & w_data3395w[1..1]), (w_anode3433w[0..0] & (! w_data3395w[0..0])), w_anode3397w[1..1]);
	w_anode3443w[] = ( (w_anode3443w[2..2] & (! w_data3395w[2..2])), (w_anode3443w[1..1] & w_data3395w[1..1]), (w_anode3443w[0..0] & w_data3395w[0..0]), w_anode3397w[1..1]);
	w_anode3453w[] = ( (w_anode3453w[2..2] & w_data3395w[2..2]), (w_anode3453w[1..1] & (! w_data3395w[1..1])), (w_anode3453w[0..0] & (! w_data3395w[0..0])), w_anode3397w[1..1]);
	w_anode3463w[] = ( (w_anode3463w[2..2] & w_data3395w[2..2]), (w_anode3463w[1..1] & (! w_data3395w[1..1])), (w_anode3463w[0..0] & w_data3395w[0..0]), w_anode3397w[1..1]);
	w_anode3473w[] = ( (w_anode3473w[2..2] & w_data3395w[2..2]), (w_anode3473w[1..1] & w_data3395w[1..1]), (w_anode3473w[0..0] & (! w_data3395w[0..0])), w_anode3397w[1..1]);
	w_anode3483w[] = ( (w_anode3483w[2..2] & w_data3395w[2..2]), (w_anode3483w[1..1] & w_data3395w[1..1]), (w_anode3483w[0..0] & w_data3395w[0..0]), w_anode3397w[1..1]);
	w_anode3495w[] = ( (w_anode3495w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3502w[] = ( (w_anode3502w[2..2] & (! w_data3395w[2..2])), (w_anode3502w[1..1] & (! w_data3395w[1..1])), (w_anode3502w[0..0] & (! w_data3395w[0..0])), w_anode3495w[1..1]);
	w_anode3513w[] = ( (w_anode3513w[2..2] & (! w_data3395w[2..2])), (w_anode3513w[1..1] & (! w_data3395w[1..1])), (w_anode3513w[0..0] & w_data3395w[0..0]), w_anode3495w[1..1]);
	w_anode3523w[] = ( (w_anode3523w[2..2] & (! w_data3395w[2..2])), (w_anode3523w[1..1] & w_data3395w[1..1]), (w_anode3523w[0..0] & (! w_data3395w[0..0])), w_anode3495w[1..1]);
	w_anode3533w[] = ( (w_anode3533w[2..2] & (! w_data3395w[2..2])), (w_anode3533w[1..1] & w_data3395w[1..1]), (w_anode3533w[0..0] & w_data3395w[0..0]), w_anode3495w[1..1]);
	w_anode3543w[] = ( (w_anode3543w[2..2] & w_data3395w[2..2]), (w_anode3543w[1..1] & (! w_data3395w[1..1])), (w_anode3543w[0..0] & (! w_data3395w[0..0])), w_anode3495w[1..1]);
	w_anode3553w[] = ( (w_anode3553w[2..2] & w_data3395w[2..2]), (w_anode3553w[1..1] & (! w_data3395w[1..1])), (w_anode3553w[0..0] & w_data3395w[0..0]), w_anode3495w[1..1]);
	w_anode3563w[] = ( (w_anode3563w[2..2] & w_data3395w[2..2]), (w_anode3563w[1..1] & w_data3395w[1..1]), (w_anode3563w[0..0] & (! w_data3395w[0..0])), w_anode3495w[1..1]);
	w_anode3573w[] = ( (w_anode3573w[2..2] & w_data3395w[2..2]), (w_anode3573w[1..1] & w_data3395w[1..1]), (w_anode3573w[0..0] & w_data3395w[0..0]), w_anode3495w[1..1]);
	w_data3395w[2..0] = data_wire[2..0];
END;
--VALID FILE
